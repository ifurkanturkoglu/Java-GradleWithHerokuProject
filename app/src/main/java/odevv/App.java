/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package odevv;
import static spark.Spark.port;
import static spark.Spark.get;
import static spark.Spark.post;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;
public class App {
    
   

    public static void main(String[] args) {
        
        String change_port = System.getenv("PORT");

        int port = change_port != null ? Integer.parseInt(System.getenv("PORT")) : 4567;

        port(port);
        
    
 post("/compute", (req, res) -> {

    String input1 = req.queryParams("input1");
    java.util.Scanner sc1 = new java.util.Scanner(input1);
    sc1.useDelimiter("[;\r\n,]+");
    java.util.ArrayList<String> inputList = new java.util.ArrayList<>();
    while (sc1.hasNext())
    {
    String value = sc1.next().replaceAll("\\s","");
    inputList.add(value);
    }
    sc1.close();


    String input2 = req.queryParams("input2");
    java.util.Scanner sc2 = new java.util.Scanner(input2);
    sc2.useDelimiter("[;\r\n,]+");
    String[] inputList2 = new String[10];
    int sayac = 0;
    while (sc2.hasNext())
    {
    String value = sc2.next().replaceAll("\\s","");
    inputList2[sayac] = value;
    sayac++;
    }
    sc2.close();

    String input3 = req.queryParams("input3").replaceAll("\\s","");
    int input3AsInt = Integer.parseInt(input3);

    String input4 = req.queryParams("input4").replaceAll("\\s","");
    int input4AsInt = Integer.parseInt(input4);

    String input5 = req.queryParams("input4").replaceAll("\\s","");
    int input5AsInt = Integer.parseInt(input5);

    boolean result = App.sliderCountCal(inputList,inputList2,input3AsInt, input4AsInt, input5AsInt);
    Map<String, Boolean> map = new HashMap<String, Boolean>();
    map.put("result", result);
    return new ModelAndView(map, "compute.mustache");
    }, new MustacheTemplateEngine());

    get("/compute",
    (rq, rs) -> {
    Map<String, String> map = new HashMap<String, String>();
    map.put("result", "not computed yet!");
    return new ModelAndView(map, "compute.mustache");
    },
    new MustacheTemplateEngine());
   

        
    }
    public static boolean sliderCountCal(ArrayList<String> sliderItems,String[]images,int baslangic,int son,int sliderItemCount){
                    
        if(son == 0) return false;   
        else if(images.length == 0) return false;
        else if(baslangic < 0) return false;
       
        ArrayList<ArrayList<String>> slider = new ArrayList<>();
        double sliderCount = Math.ceil(images.length/sliderItemCount);
        double artis;
        if(sliderItems.size()< son ) son = sliderItems.size();
        for(int i = 0; i < sliderCount;i++){
            for(int j = baslangic; j < son; j++){
                sliderItems.add(images[j]);
            }
            slider.add(sliderItems);
            sliderItems.clear();
            if(images.length % sliderItemCount == 0){
                artis = sliderItemCount;
            } 
            else{
                artis = Math.ceil(images.length % sliderItemCount);
                if(son == images.length - artis && sliderItemCount != 1){
                    artis = images.length % sliderItemCount;
                }
                else{
                    artis = sliderItemCount;
                }
            }
            son += artis;
        }
        if(slider.size() == 0) return false;  
        else if(sliderCount == 0) return false; 
        else if(son < baslangic) return false;
        return true;
    }
}
